import sys
import os
from typing import TextIO

from loguru import logger
import click
import bibtexparser

from .process import Processor


def init_logger_(verbose: int):
    level = ['WARNING', 'INFO', 'DEBUG'][min(verbose, 2)]
    if sys.stderr.isatty():
        format_ = '<level>{level}</level>: {message}'
        colorize = True
    else:
        format_ = '{level}: {message}'
        colorize = False
    logger.remove()
    logger.add(sys.stderr, colorize=colorize, format=format_, level=level)


@click.command()
@click.option(
    '-b',
    '--basedir',
    'attachment_basedir',
    metavar='ATTACHMENT_BASEDIR',
    type=click.Path(
        exists=True,
        dir_okay=True,
        file_okay=False,
    ),
    required=True,
    help=('The base absolute directory of the BibDesk attachments. '
          'Usually this is the parent directory of the BibDesk bib file.'),
)
@click.option(
    '--strip-existing-file/--no-strip-existing-file',
    default=True,
    help=('Whether to strip existing `file` field before migration. '
          'This might be needed if the BibDesk was migrated from Mendeley or '
          'Zotero. The source BibDesk file will not be modified. '
          '[default: strip existing `file`]'))
@click.option(
    '-c',
    '--check',
    is_flag=True,
    default=False,
    help=('To check whether BIBFILE is already compatible with Zotero 7 and '
          'return zero if it is. All standard output will be suppressed.'),
)
@click.option(
    '-v',
    '--verbose',
    count=True,
    help='Being verbose; can specify at most twice.',
)
@click.version_option(None, '-V', '--version', message='%(version)s')
@click.argument('bibfile', type=click.File(encoding='utf-8'))
def main(
    attachment_basedir: str,
    strip_existing_file: bool,
    check: bool,
    verbose: int,
    bibfile: TextIO,
):
    """
    Convert the BIBFILE generated by BibDesk to something ready to be imported
    by Zotero 7. The result bibtex will be printed to stdandard output.
    """
    init_logger_(verbose)
    if not os.path.isabs(attachment_basedir):
        logger.error(
            'ATTACHMENT_BASEDIR must be an absolute directory, but got: {}',
            attachment_basedir)
        sys.exit(1)
    proc = Processor(attachment_basedir, strip_existing_file)
    parser = bibtexparser.bparser.BibTexParser()
    parser.ignore_nonstandard_types = False
    parser.customization = proc
    db = bibtexparser.load(bibfile, parser)
    logger.info('Read in {} entries', len(db.entries))
    if check:
        sys.exit(0 if not proc.modified else 1)
    click.echo(bibtexparser.dumps(db))
